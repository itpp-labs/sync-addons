<?xml version='1.0' encoding='UTF-8' ?>
<!-- Copyright 2021 Denis Mudarisov <https://github.com/trojikman>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <record id="twindis-integration_sync-project" model="sync.project">
        <field name="name">Twindis Integration</field>
        <field name="active" eval="True" />
        <field name="eval_context">twindis</field>
        <field
            name="common_code"
        ><![CDATA[PRODUCT_REL = "twindis2odoo_product"
REL_TWINDIS_CSV = "REL_TWINDIS_CSV"

def is_product_suitable(product, domain, fields):
  for key, value in domain.items():
    # TODO: make case insensitivity and show log message that searching field is not represented in the table
    if product[fields.index(key)] not in value:
      return False
  return True

def filter_products(table_fields, data, domain, limit=None):
    suitable_products = []
    qty = 0
    for product in data:
        if is_product_suitable(product, domain, table_fields):
            suitable_products.append(product)
        if limit and limit == qty:
            break
        elif limit:
            qty += 1
    return suitable_products

def product2vals(product):
  prepared_product = {
    "productid": product[0],
    "retail_price": product[1],
    "channel": product[2],
    "productgroup": product[3],
    "brandname": product[4],
    "image_thumb": product[5],
    "image_small": product[6],
    "image_medium": product[7],
    "image_large": product[8],
    "url": product[9],
    "productcategory": product[10],
    "product_name": product[11],
    "ean": product[12],
    "description": product[13],
    "oem": product[14],
  }
  return prepared_product

def get_current_file(ref, url):
    if not ref.datas:
      ref = get_file(url, ref)

def create_products(products):
  for product in products:
    twindis_product = product2vals(product)
    product_link = get_link(PRODUCT_REL, twindis_product["productid"])
    if not product_link:
      odoo_product = env["product.template"].create(
        [
          {
            "name": twindis_product["product_name"],
            "default_code": twindis_product["productid"],
            "image_1920": fetch_image_from_url(twindis_product["image_large"]),
            "list_price": float(twindis_product["retail_price"]),
            "barcode": twindis_product["ean"],
          }
        ]
      )
      sync_date = odoo_product["create_date"]
      odoo_product.set_link(PRODUCT_REL, twindis_product["productid"], sync_date)

def get_current_file(url, ref):
    if not ref.datas:
      ref = get_file(url, ref)
    return ref]]></field>
    </record>
    <record id="login_project-secret-parameter" model="sync.project.secret">
        <field name="key">LOGIN</field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="password_project-secret-parameter" model="sync.project.secret">
        <field name="key">PASSWORD</field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="products-url_project-parameter" model="sync.project.param">
        <field name="key">PRODUCTS_URL</field>
        <field name="value">https://api.twindis.com/api/v1/file/product-nl.csv</field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="prices-url_project-parameter" model="sync.project.param">
        <field name="key">PRICES_URL</field>
        <field name="value">https://api.twindis.com/api/v1/file/prices.csv</field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="limit-products_project-parameter" model="sync.project.param">
        <field name="key">LIMIT_PRODUCTS</field>
        <field name="value">100</field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="product-domain_project-parameter" model="sync.project.param">
        <field name="key">PRODUCT_DOMAIN</field>
        <field name="value">
            {"channel": ["Laptop", "Drucker", "Handy"], "brandname": ["Dell", "HP"]}
        </field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="product-file-name_project-parameter" model="sync.project.param">
        <field name="key">PRODUCT_FILE_NAME</field>
        <field name="value">product-nl.csv</field>
        <field name="description" />
        <field name="url" eval="" />
        <field name="project_id" ref="twindis-integration_sync-project" />
    </record>
    <record id="sync-twindis-products-to-odoo_sync-task" model="sync.task">
        <field name="name">Sync Twindis Products To Odoo</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="twindis-integration_sync-project" />
        <field
            name="code"
        ><![CDATA[def handle_button():
  file_link = get_link(REL_TWINDIS_CSV, params.PRODUCT_FILE_NAME)
  if not file_link:
    file_url = "https://api.twindis.com/api/v1/file/{}".format(params.PRODUCT_FILE_NAME)
    product_file = env["ir.attachment"].create({
      "name": params.PRODUCT_FILE_NAME,
      "type": "binary",
      "mimetype": "text/csv",
      "datas": get_file(file_url)
    })
    file_link = product_file.set_link(REL_TWINDIS_CSV, params.PRODUCT_FILE_NAME)

  fields, data = read_csv_attachment(file_link.odoo)
  product_domain = json.loads(params.PRODUCT_DOMAIN)
  limit = int(params.LIMIT_PRODUCTS)
  products = filter_products(fields, data, product_domain, limit=limit)
  create_products(products)
]]></field>
    </record>
    <record id="filter-products_manual-trigger" model="sync.trigger.button">
        <field name="trigger_name">FILTER_PRODUCTS</field>
        <field name="name" />
        <field name="sync_task_id" ref="sync-twindis-products-to-odoo_sync-task" />
    </record>
</odoo>
