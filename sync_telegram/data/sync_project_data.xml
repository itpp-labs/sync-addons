<?xml version='1.0' encoding='UTF-8' ?>
<!-- Copyright 2021 Ilya Ilchenko <https://github.com/mentalko>
     Copyright 2021 Denis Mudarisov <https://github.com/trojikman>
     Copyright 2021 Ivan Yelizariev <https://twitter.com/yelizariev>
     License MIT (https://opensource.org/licenses/MIT). -->
<odoo>
    <record id="telegram_project" model="sync.project">
        <field name="name">Telegram Integration</field>
        <field name="eval_context">telegram</field>
        <field
            name="common_code"
        ><![CDATA[
TG_PARTNER="TG_PARTNER_REL"
TG_CHANNEL="TG_CHAT_CHANNEL_REL"
TG_THREAD="TG_CHAT_MODEL_REL"
odoobot_id = env.user.browse(1).partner_id.id


def user2name(user, with_username=False):
    name = user.first_name
    if user.last_name:
        name += ' %s' % user.last_name
    if user.username and with_username:
        name += ' (@%s)' % user.username
    return name
        ]]></field>
    </record>
    <record id="telegram_project_secret" model="sync.project.secret">
        <field name="key">TELEGRAM_BOT_TOKEN</field>
        <field name="description">
            Authentication token provided by https://t.me/BotFather
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_welcome" model="sync.project.text">
        <field name="key">TELEGRAM_WELCOME_MESSAGE</field>
        <field name="description">
            Message that is sent to a user on first bot usage
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_prefix" model="sync.project.param">
        <field name="key">PARTNER_NAME_TEMPLATE</field>
        <field name="description">
            Template for new partner name. Must have single %s
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="record-name-prefix_project-parameter" model="sync.project.param">
        <field name="key">CHAT_RECORD_NAME_TEMPLATE</field>
        <field name="description">
            Template for new record name. Must have single %s
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_model" model="sync.project.param">
        <field name="key">CHAT_MODEL</field>
        <field name="description">
            Record of which model is created on incoming message from new telegram user
            (e.g. crm.lead, project.task,
            etc). The model must have field partner_id
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_mail_chat" model="sync.project.param">
        <field name="key">WEBHOOK_CHAT</field>
        <field name="value">yes</field>
        <field name="description">
            Set to "no" to disable redirecting telegram messages to odoo chat
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_project_param_operator_id" model="sync.project.param">
        <field name="key">OPERATOR_IDS</field>
        <field name="description">
            Comma-separated list of user ids that will added to Discuss chat on getting
            message from new telegram user
        </field>
        <field name="url" eval="" />
        <field name="project_id" ref="telegram_project" />
    </record>
    <record id="telegram_task_setup" model="sync.task">
        <field name="name">Setup</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[

def handle_button():
    telegram.setWebhook(webhooks.TELEGRAM, allowed_updates=["message", "edited_message"])

        ]]></field>
    </record>
    <record id="telegram_task_tele2odoo" model="sync.task">
        <field name="name">Process Telegram Messages</field>
        <field name="active" eval="True" />
        <field name="project_id" ref="telegram_project" />
        <field
            name="code"
        ><![CDATA[
def handle_webhook(httprequest):
  data = json.loads(httprequest.data.decode("utf-8"))
  log("Raw data: %s" % data, LOG_DEBUG)

  update = telegram.parse_data(data)
  message = update.message or update.edited_message
  odoo_message_text = message.text or message.caption or ""
  telegram_user_ref =  message.from_user.id
  name = params.PARTNER_NAME_TEMPLATE % user2name(message.from_user, True)
  record_name = user2name(message.from_user) #предлягаю добавлять id партнера к его имени

  def partner_vals(telegram, name, message): #"lang": message.from_user.language_code
    return {
      "name": name,
      "image_1920": telegram.getUserPhoto(message.from_user.id),
    }
  partner_kwargs = dict(telegram=telegram, name=name, message=message)
  partner, is_new_partner = multi_livechat.get_partner(TG_PARTNER, telegram_user_ref, partner_vals, partner_kwargs)

  if params.WEBHOOK_CHAT != "no":
    if message.text == "/start":
      telegram.sendMessage(telegram_user_ref, texts.TELEGRAM_WELCOME_MESSAGE)
    elif bool(update.edited_message):
      odoo_message_text = "Contact has edited the message:"

    channel_name = record_name
    operators_user_ids = list(map(int, params.OPERATOR_IDS.split(",")))
    operators_partner_ids = env.user.browse(operators_user_ids).mapped("partner_id").ids
    partner_ids = [partner.id] + operators_partner_ids
    channel, is_new_channel = multi_livechat.get_channel(TG_CHANNEL, telegram_user_ref, channel_name, partner_ids)

    if params.CHAT_MODEL != "res.partner":
      def thread_vals(record_name):
        return {
          "name": record_name,
        }
      thread_kwargs = dict(record_name=record_name)
      record_message = """<b><a href="channel_url">Chat with partner is created.</a></b>""".format(
        channel_url=multi_livechat.get_channel_url(channel)
      )
      thread, is_new_thread = multi_livechat.get_thread(
        "%s:%s" % (TG_THREAD, params.CHAT_MODEL),
        telegram_user_ref,
        thread_vals,
        thread_kwargs,
        params.CHAT_MODEL,
        record_message,
      )
      if is_new_thread:
        multi_livechat.post_channel_message(channel,
        """<b><a href="{record_url}">Record is created. </a></b>""".format(
          record_url=multi_livechat.get_record_url(thread)
          ))

    file_bin_data = []
    telegram_document = update.message.document
    telegram_photo = update.message.photo
    telegram_media = update.message.video or update.message.voice or update.message.video_note
    telegram_sticker = update.message.sticker


    if not update.message.text:
        if telegram_photo and telegram_photo[-1].file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
            file_bin_data = telegram.getMediaFile(telegram_user_ref, telegram_photo[-1])

        elif telegram_media and telegram_media.file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
            file_bin_data = telegram.getMediaFile(telegram_user_ref, telegram_media)

        elif telegram_document and telegram_document.file_size < telegram.MAX_SIZE_TO_DOWNLOAD:
            file_bin_data = telegram.getDocumentFile(telegram_user_ref, telegram_document)

        elif telegram_photo or telegram_media or telegram_document:
            channel.message_post(body="Incoming file is too big and cannot be downloaded due to Telegram API restirctions",
            author_id=odoobot_id, message_type="comment", subtype_xmlid="mail.mt_comment")
            telegram.sendMessage(telegram_user_ref, "File is too big, file size must not exceed 20 MB.")

        if telegram_sticker:
            log("telegram_sticker: %s" % telegram_sticker, LOG_INFO)
            channel.message_post(body=telegram_sticker.emoji, author_id=partner_link.odoo.id,
            message_type="comment", subtype_xmlid="mail.mt_comment")

    if odoo_message_text:
        multi_livechat.post_channel_message(channel, odoo_message_text, author=partner.id, ) # предлагаю добавить attachments=[file_bin_data]
    if file_bin_data:
        channel.message_post(body=odoo_message_text, author_id=partner.id,
            message_type="comment", subtype_xmlid="mail.mt_comment", attachments=[file_bin_data])


        ]]></field>
    </record>
    <record id="telegram_trigger_button" model="sync.trigger.button">
        <field name="trigger_name">SETUP_TELEGRAM</field>
        <field name="name">Setup webhooks</field>
        <field name="sync_task_id" ref="telegram_task_setup" />
    </record>
    <record id="telegram_trigger_webhook" model="sync.trigger.webhook">
        <field name="trigger_name">TELEGRAM</field>
        <field name="active" eval="True" />
        <field name="name">Telegram updates</field>
        <field name="sync_task_id" ref="telegram_task_tele2odoo" />
        <field name="webhook_type">json</field>
    </record>
</odoo>
